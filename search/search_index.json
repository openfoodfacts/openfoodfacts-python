{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open Food Facts Python SDK","text":""},{"location":"#status","title":"Status","text":""},{"location":"#description","title":"Description","text":"<p>This is the official Python SDK for the Open Food Facts project. It provides a simple interface to the Open Food Facts API and allows you to:</p> <ul> <li>Get information about a product</li> <li>Perform text search</li> <li>Create a new product or update an existing one</li> </ul> <p>It also provides some helper functions to make it easier to work with Open Food Facts data and APIs, such as:</p> <ul> <li>getting translation of a taxonomized field in a given language</li> <li>downloading and iterating over the Open Food Facts data dump</li> <li>handling OCRs of Open Food Facts images generated by Google Cloud Vision</li> </ul> <p>Please note that this SDK is still in beta and the API is subject to change. Make sure to pin the version in your requirements file.</p>"},{"location":"#installation","title":"Installation","text":"<p>The easiest way to install the SDK is through pip:</p> <pre><code>pip install openfoodfacts\n</code></pre> <p>or manually from source:</p> <pre><code>git clone https://github.com/openfoodfacts/openfoodfacts-python\ncd openfoodfacts-python\npython setup.py install\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<p>All the examples below assume that you have imported the SDK and instanciated the API object:</p> <pre><code>import openfoodfacts\n\n# User-Agent is mandatory\napi = openfoodfacts.API(user_agent=\"MyAwesomeApp/1.0\")\n</code></pre> <p>Get information about a product</p> <pre><code>code = \"3017620422003\"\napi.product.get(code, fields=[\"code\", \"product_name\"])\n# {'code': '3017620422003', 'product_name': 'Nutella'}\n</code></pre> <p>Perform text search</p> <pre><code>api.product.text_search(\"mineral water\")\n# {\"count\": 3006628, \"page\": 1, \"page_count\": 20, \"page_size\": 20, \"products\": [{...}], \"skip\": 0}\n</code></pre> <p>Create a new product or update an existing one</p> <pre><code>results = api.product.update({\n    \"code\": CODE,\n    \"product_name_en\": \"blueberry jam\",\n    \"ingredients_text_en\": \"blueberries, sugar, pectin, citric acid\"\n})\n</code></pre> <p>with <code>CODE</code> the product barcode. The rest of the body should be a dictionary of fields to create/update.</p> <p>To see all possible capabilities, check out the usage guide.</p>"},{"location":"#third-party-applications","title":"Third party applications","text":"<p>If you use this SDK, feel free to open a PR to add your application in this list.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Any help is welcome, as long as you don't break the continuous integration. Fork the repository and open a Pull\u00a0Request directly on the \"develop\" branch. A maintainer will review and integrate your changes.</p> <p>Maintainers:</p> <ul> <li>Anubhav Bhargava</li> <li>Frank Rousseau</li> <li>Pierre Slamich</li> <li>Rapha\u00ebl</li> </ul> <p>Contributors:</p> <ul> <li>Agamit Sudo</li> <li>Daniel Stolpe</li> <li>Enioluwa Segun</li> <li>Nicolas Leger</li> <li>Pablo Hinojosa</li> <li>Andrea Stagi</li> <li>Beno\u00eet Prieur</li> <li>Aadarsh A</li> </ul>"},{"location":"#copyright-and-license","title":"Copyright and License","text":"<pre><code>Copyright 2016-2024 Open Food Facts\n</code></pre> <p>The Open Food Facts Python SDK is licensed under the MIT License.</p>"},{"location":"handle_taxonomies/","title":"Handle taxonomies","text":"<p>The Python SDK provides an easy way to access and handle the taxonomies available on Open Food Facts.</p> <p>Taxonomies are at the heart of Open Food Facts. They are used to structure knowledge about ingredients, categories, labels, additives, countries, brands, etc.</p> <p>To have a better understanding of how taxonomies work, you can read the wiki page about taxonomies.</p>"},{"location":"handle_taxonomies/#usage","title":"Usage","text":""},{"location":"handle_taxonomies/#get-information-about-a-taxonomy-item","title":"Get information about a taxonomy item","text":"<p>First, instantiate a Taxonomy object:</p> <pre><code>from openfoodfacts.taxonomy import get_taxonomy\n\n# Use the singular form of the taxonomy name\ntaxonomy = get_taxonomy(\"category\")\nprint(taxonomy)\n# &lt;openfoodfacts.taxonomy.Taxonomy object at 0x7fe9d3f44940&gt;\n</code></pre> <p>The taxonomy object provides a way to access the taxonomy data. For example, if you want to get the node <code>en:biscuits</code>:</p> <pre><code>node = taxonomy[\"en:biscuits\"]\nprint(node)\n# &lt;TaxonomyNode en:biscuits&gt;\n</code></pre> <p>If the node does not exist, <code>None</code> is returned.</p> <p>You can get the the translation in a specific language:</p> <pre><code>print(node.get_localized_name(\"it\"))\n# Biscotti\n</code></pre> <p>Each node has one or more parents, stored in the <code>parents</code> field:</p> <pre><code>print(node.parents)\n# [&lt;TaxonomyNode en:biscuits-and-cakes&gt;]\n</code></pre> <p>Likewise, children can be accessed using the <code>children</code> field.</p> <p>To get the full parent hierarchy (that includes all parents found recursively), use the <code>get_parents_hierarchy</code> method:</p> <pre><code>print(node.get_parents_hierarchy())\n# [&lt;TaxonomyNode en:biscuits-and-cakes&gt;, &lt;TaxonomyNode en:sweet-snacks&gt;, &lt;TaxonomyNode en:snacks&gt;]\n</code></pre> <p>Beside the main translation that can be accessed using <code>get_localized_name</code>, each node may have synonyms. This information can be easily accessed as well:</p> <pre><code># synonyms is a dict mapping language codes to a list of\n# synonyms in that language. The key is missing if there are\n# no synonyms.\nprint(node.synonyms[\"es\"])\n# [\"Galletas\", \"galleta\"]\n</code></pre> <p>Taxonomy node properties are stored in the <code>properties</code> field:</p> <pre><code>print(node.properties)\n# {\n#    \"wikipedia\": {\"en\": \"https://en.wikipedia.org/wiki/Biscuit\"},\n#    \"carbon_footprint_fr_foodges_ingredient\": {\"fr\": \"Biscuit au beurre\"},\n#    \"agribalyse_proxy_food_code\": {\"en\": \"24000\"},\n#    \"ciqual_proxy_food_name\": {\n#        \"en\": \"Biscuit -cookie-\",\n#        \"fr\": \"Biscuit sec, sans pr\u00e9cision\",\n#    },\n#    \"wikidata\": {\"en\": \"Q13270\"},\n#    \"ciqual_proxy_food_code\": {\"en\": \"24000\"},\n#}\n</code></pre>"},{"location":"handle_taxonomies/#the-taxonomy-object","title":"The Taxonomy object","text":"<p>The <code>Taxonomy</code> object is a dictionary-like object that maps node IDs to <code>TaxonomyNode</code> objects.</p> <p>It also provides a way to iterate over all nodes:</p> <pre><code>for node in taxonomy.iter_nodes():\n    print(node)\n# &lt;TaxonomyNode fr:beaune-premier-cru-belissand-blanc&gt;\n# &lt;TaxonomyNode fr:pommard-les-rugiens-bas&gt;\n# &lt;TaxonomyNode en:hazelnut-butters&gt;\n# &lt;TaxonomyNode fr:pernand-vergelesses&gt;\n# &lt;TaxonomyNode it:terre-di-pisa&gt;\n# &lt;TaxonomyNode en:creamy-quark&gt;\n# ...\n</code></pre>"},{"location":"handle_taxonomies/#find-leaf-nodes-in-the-taxonomy","title":"Find leaf nodes in the taxonomy","text":"<p>One very common usecase is to find the leafs nodes among a list of nodes, i.e. the nodes that have no children. For example, in Open Food Facts, the <code>categories_tags</code> field contains the categories submitted by the user and all their parents. If you're only interested in the most precise categories, you need to filter out the categories that have children:</p> <pre><code># Let's say you have a product that has the following categories:\ncategories_tags = [\"en:plant-based-foods-and-beverages\",\"en:plant-based-foods\",\"en:breakfasts\",\"en:cereals-and-potatoes\",\"en:fruits-and-vegetables-based-foods\",\"en:cereals-and-their-products\",\"en:fruits-based-foods\",\"en:breakfast-cereals\",\"en:mueslis\",\"en:cereals-with-nuts\",\"en:crunchy-cereal-clusters\",\"en:cereal-clusters-with-nuts\"]\n\n# Convert the ID to TaxonomyNode objects:\ncategories_nodes = [taxonomy[tag] for tag in categories_tags if tag in taxonomy]\n\n# Let's find the leaf nodes using find_deepest_nodes method:\nleaf_nodes = taxonomy.find_deepest_nodes(categories_nodes)\nprint(leaf_nodes)\n# [&lt;TaxonomyNode en:fruits-based-foods&gt;, &lt;TaxonomyNode en:mueslis&gt;, &lt;TaxonomyNode en:cereal-clusters-with-nuts&gt;]\n</code></pre> <p>As you can see, the parent categories were removed, and only the leaf nodes remain.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide provides information on the methods available within the Open Food Facts Python SDK.</p>"},{"location":"usage/#api","title":"API","text":"<p>The SDK can be used to access Open Food Facts API.</p> <p>First, instantiate an API object:</p> <pre><code>from openfoodfacts import API, APIVersion, Country, Environment, Flavor\n\napi = API(\n    user_agent=\"&lt;application name&gt;\",\n    username=None,\n    password=None,\n    country=Country.world,\n    flavor=Flavor.off,\n    version=APIVersion.v2,\n    environment=Environment.org,\n)\n</code></pre> <p>All parameters are optional with the exception of user_agent, but here is a description of the parameters you can tweak:</p> <ul> <li><code>username</code> and <code>password</code> are used to provide authentication (required for write requests)</li> <li><code>country</code> is used to specify the country, which is used by the API to return product specific to the country or to infer which language to use by default. <code>world</code> (all products) is the default value</li> <li><code>flavor</code>: the Open*Facts project you want to interact with: <code>off</code> (Open Food Facts, default), <code>obf</code> (Open Beauty Facts), <code>opff</code> (Open Pet Food Facts), <code>opf</code> (Open Products Facts)</li> <li><code>version</code>: API version (v2 is the default)</li> <li><code>environment</code>: either <code>org</code> for production environment (openfoodfacts.org) or <code>net</code> for staging (openfoodfacts.net)</li> </ul> <p>Get information about a product</p> <pre><code>code = \"3017620422003\"\napi.product.get(code)\n</code></pre> <p>Perform text search</p> <pre><code>results = api.product.text_search(\"pizza\")\n</code></pre> <p>Create a new product or update an existing one</p> <pre><code>results = api.product.update(body)\n</code></pre> <p>with <code>body</code> the update body. It is a dictionary. It should contain  the key \"code\" and its value, corresponding to the product that we want to update. Example: <code>body = {'code': '3850334341389', 'product_name': 'Mlinci'}</code></p>"},{"location":"usage/#using-the-dataset","title":"Using the dataset","text":"<p>If you're planning to perform data analysis on Open Food Facts, the easiest way is to download and use the Open Food Facts dataset dump. Fortunately it can be done really easily using the SDK:</p> <pre><code>from openfoodfacts import ProductDataset\n\ndataset = ProductDataset(dataset_type=\"csv\")\n\nfor product in dataset:\n    print(product[\"product_name\"])\n</code></pre> <p>With <code>dataset = ProductDataset(dataset_type=\"csv\")</code>, we automatically download (and cache) the food dataset. We can then iterate over it to get information about products.</p> <p>Two dataset types are available <code>csv</code> and <code>jsonl</code>. The <code>jsonl</code> dataset contains all the Open Food Facts database information but takes much more storage (&gt;5 GB), while the <code>csv</code> dataset is much ligher (~800 MB) but only contains the most important fields. The <code>jsonl</code> dataset type is used by default.</p> <p>You can also use <code>ProductDataset</code> to fetch other non-food datasets:</p> <pre><code>from openfoodfacts import ProductDataset\n\ndataset = ProductDataset(dataset_type=\"csv\")\n\nfor product in dataset:\n    print(product[\"product_name\"])\n</code></pre>"},{"location":"usage/#taxonomies","title":"Taxonomies","text":"<p>For a deep dive on how to handle taxonomies, check out the dedicated page.</p>"}]}